name: Build and push Docker image

on:
  push:
    branches: [master]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from package.json
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Check if image with version already exists
        run: |
          if curl --silent --fail --location "https://ghcr.io/v2/linusromland/velody/manifests/${{ env.VERSION }}" > /dev/null; then
            echo "IMAGE_EXISTS=yes" >> $GITHUB_ENV
          else
            echo "IMAGE_EXISTS=no" >> $GITHUB_ENV
          fi
      - name: Build and Push Image
        if: env.IMAGE_EXISTS == 'no'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/linusromland/velody:latest
            ghcr.io/linusromland/velody:${{ env.VERSION }}
      - name: Create GitHub Release
        if: env.IMAGE_EXISTS == 'no'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Update Release Notes
        if: env.IMAGE_EXISTS == 'no'
        run: |
          VERSION=${{ env.VERSION }}
          RELEASE_NOTES=$(awk -v ver="$VERSION" 'BEGIN {RS="## "; FS="\n"} $1 ~ ver {for (i=2; i<=NF; i++) print $i}' CHANGELOG.md)
          RELEASE_NOTES_ESCAPED=$(echo "$RELEASE_NOTES" | sed ':a;N;$!ba;s/\n/\\n/g')
          RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION"
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $RELEASE_URL | jq -r .id)
          UPDATE_URL="https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
          curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d "{\"body\": \"$RELEASE_NOTES_ESCAPED\"}" $UPDATE_URL
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
